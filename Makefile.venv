BUILD_HARNESS_REQ_TEMPLATE:=$(BUILD_HARNESS_PATH)/requirements.template
BUILD_HARNESS_REQ_NAME:=.build-harness.requirements.txt
BUILD_HARNESS_REQ:=$(CURDIR)/$(BUILD_HARNESS_REQ_NAME)
BUILD_HARNESS_VENV_NAME:=.build-harness.venv
BUILD_HARNESS_VENV:=$(CURDIR)/$(BUILD_HARNESS_VENV_NAME)
WITH_BH_VENV=$(shell test -f $(BUILD_HARNESS_REQ) && echo "source $(BUILD_HARNESS_VENV)/bin/activate &&")

define which
$(shell $(WITH_BH_VENV) which $1 2>/dev/null)
endef

.PHONY: bh/venv/debug
bh/venv/debug:
	$(call print-var,VENV_MODULE)
	$(call print-var,BUMPVERSION)
	$(call print-var,BLACK)
	$(call print-var,ISORT)

$(BUILD_HARNESS_REQ_TEMPLATE):
	@echo "[build-harness] MISSING: $@"

$(BUILD_HARNESS_REQ): $(BUILD_HARNESS_REQ_TEMPLATE)
	@if [ -f $@ ]; then echo "Removing previously generated build-harness requirements" && rm $@; fi
	@cat $(BUILD_HARNESS_REQ_TEMPLATE) | xargs -I % bash -c 'if [ -z "$$(which % 2>/dev/null)" ]; then echo "% not found in PATH" && echo "%" >> $@; fi'

$(BUILD_HARNESS_VENV): $(BUILD_HARNESS_REQ)
	@if [ -s $(BUILD_HARNESS_REQ) ]; then echo "Installing: $$(cat $(BUILD_HARNESS_REQ) | tr '\n' ' ') (from $(BUILD_HARNESS_REQ))"; fi
	@test -f $(BUILD_HARNESS_REQ) \
		&& ( \
			$(shell if [ $$(python -c 'import platform; ver=int(platform.python_version()[0]); print(ver)' 2>/dev/null) -eq 2 ] && [ -n "$$(which python3 2>/dev/null)" ]; then echo "python3"; else echo "python"; fi) -m venv $@ \
			&& source $@/bin/activate && pip install -r $(BUILD_HARNESS_REQ) --ignore-installed \
		); if [ $$? -ne 0 ]; then rm -rf $@; fi
