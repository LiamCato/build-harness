PY_PIPENV := $(shell which pipenv 2>/dev/null)
ifneq ($(PY_PIPENV),)
	# Unless WORKON_HOME is set, assume we're going to create ".venv" next to the Pipfile.
	ifeq ($(WORKON_HOME),)
		PIPENV := PIPENV_VENV_IN_PROJECT=1 $(PY_PIPENV)
	else
		PIPENV := PIPENV_VENV_IN_PROJECT= WORKON_HOME='$(WORKON_HOME)' $(PY_PIPENV)
	endif
	WITH_PIPENV := $(PIPENV) run

	# Get the directory where the Pipfile is.
	PIPENV_HOME := $(shell $(PIPENV) --where 2> /dev/null)

	ifneq ($(PIPENV_HOME),)
		ifeq ($(WORKON_HOME),)
			# Again, assume we're going to create ".venv" next to the Pipfile.
			PY_VENV := $(PIPENV_HOME)/.venv
		else
			# If the venv doesn't exist yet, then this will fail and PY_VENV will be empty
			PY_VENV := $(shell $(PIPENV) --venv 2> /dev/null)
			ifneq ($(.SHELLSTATUS),0)
				# Create the venv, then check for it's location again.
				_ := $(shell $(WITH_PIPENV) install --dev --deploy)
				PY_VENV := $(shell $(PIPENV) --venv 2> /dev/null)
			endif
		endif
	endif
endif

$(PIPENV_HOME)/Pipfile.lock: $(PIPENV_HOME)/Pipfile
	$(call assert-set,PIPENV_HOME)
	@$(MAKE) pipenv/lock

$(PY_VENV)/bin/activate: $(PIPENV_HOME)/Pipfile.lock
	$(call assert-set,PIPENV_HOME)
	$(call assert-set,PY_PIPENV)
	$(PIPENV) install --dev --deploy
	touch $(PY_VENV)/bin/activate

$(PY_VENV): $(PY_VENV)/bin/activate

.PHONY: pipenv/check
pipenv/check: python/check
	$(call assert-set,PY_PIPENV)
	echo "Found pipenv: $(PY_PIPENV)"

.PHONY: pipenv/debug
pipenv/debug: python/debug
	$(call print-var,PY_PIPENV)
	$(call print-var,WORKON_HOME)
	$(call print-var,PIPENV)
	$(call print-var,PIPENV_HOME)
	$(call print-var,PY_VENV)
	$(call print-var,WITH_PIPENV)

## Install and activate a virtual environment using pipenv
pipenv: pipenv/check $(PY_VENV) $(PIPENV_HOME)/Pipfile.lock
.PHONY: pipenv

# XXX: This is way to generic a target name.
env: pipenv
.PHONY: env

## Lock dependencies
pipenv/lock:
	$(call assert-set,PIPENV_HOME)
	$(PIPENV) lock
.PHONY: pipenv/lock

## Remove development virtualenv
pipenv/clean:
	$(call assert-set,PIPENV_HOME)
	$(PIPENV) --rm || true
.PHONY: pipenv/clean

.PHONY: pipenv/generate_requirements
## Generate requirements files based on a Pipfile
pipenv/generate_requirements: $(PIPENV_HOME)/requirements.txt $(PIPENV_HOME)/requirements-dev.txt

$(PIPENV_HOME)/requirements.txt: $(PIPENV_HOME)/Pipfile
	$(call assert-set,PIPENV_HOME)
	@echo "Writing requirements from Pipfile to requirements.txt"
	@$(WITH_PIPENV) python -c 'from pipenv.project import Project; section = "packages"; reqs = {package: (ver["version"] if isinstance(ver, dict) else ver) for package, ver in Project().parsed_pipfile[section].items()}; fd = open("requirements.txt", mode="w"); fd.writelines((r if reqs[r] == "*" else "{} {}".format(r, reqs[r])) + "\n" for r in reqs.keys()); fd.close()'

$(PIPENV_HOME)/requirements-dev.txt: $(PIPENV_HOME)/Pipfile
	$(call assert-set,PIPENV_HOME)
	@echo "Writing dev requirements from Pipfile to requirements-dev.txt"
	@$(WITH_PIPENV) python -c 'from pipenv.project import Project; section = "dev-packages"; reqs = {package: (ver["version"] if isinstance(ver, dict) else ver) for package, ver in Project().parsed_pipfile[section].items()}; fd = open("requirements-dev.txt", mode="w"); fd.writelines((r if reqs[r] == "*" else "{} {}".format(r, reqs[r])) + "\n" for r in reqs.keys()); fd.close()'

# The requirements*.txt files will be next to the Pipfile.
# If setup.py and Pipfile are in separate directories, create symlinks.
requirements.txt: $(PIPENV_HOME)/requirements.txt
	$(call assert-set,PIPENV_HOME)
	@test -f requirements.txt || ln -sf $(PIPENV_HOME)/requirements.txt requirements.txt
requirements-dev.txt: $(PIPENV_HOME)/requirements-dev.txt
	$(call assert-set,PIPENV_HOME)
	@test -f requirements-dev.txt || ln -sf $(PIPENV_HOME)/requirements-dev.txt requirements-dev.txt
