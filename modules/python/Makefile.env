CURRENT_VENV := $(shell python -c 'from __future__ import print_function; import sys; print(sys.prefix if hasattr(sys, "real_prefix") or (hasattr(sys, "base_prefix") and sys.base_prefix != sys.prefix) else "", end="")')

ifeq ($(CURRENT_VENV),)
  VIRTUALENV := .venv
else
  VIRTUALENV := $(CURRENT_VENV)
endif

VENV_WORKDIR ?= .

ifeq ($(VENV_WORKDIR),.)
  PIPENV := PIPENV_VENV_IN_PROJECT=1 pipenv
else
  PIPENV := PIPENV_VENV_IN_PROJECT= WORKON_HOME='$(shell realpath $(VENV_WORKDIR))' pipenv
  # if the venv doesn't exist then this will fail, so it will make the VIRTUALENV will be empty
  VIRTUALENV := $(shell $(PIPENV) --venv 2> /dev/null)
  ifneq ($(.SHELLSTATUS),0)
    # means pipenv failed, so it doesn't exist yet. Need to cause a make env
    _ := $(shell $(value PIPENV) install --dev --deploy)
    # this next section doesn't work on the Jenkins box, so don't catch errors
#    ifneq ($(.SHELLSTATUS),0)
#      _ := $(error "Unable to install requirements")
#    endif
    VIRTUALENV := $(shell $(PIPENV) --venv 2> /dev/null)
  endif
endif

WITH_PIPENV := $(PIPENV) run

Pipfile.lock:
	@echo "You need to lock your environment!"

$(VIRTUALENV)/bin/activate: Pipfile.lock
	$(PIPENV) install --dev --deploy
	if [ "$(VENV_WORKDIR)" = "." ]; then touch $(VIRTUALENV)/bin/activate; fi

$(VIRTUALENV): $(VIRTUALENV)/bin/activate

## Install and activate a virtual environment using pipenv
python/env: $(VIRTUALENV) Pipfile.lock

## Remove development virtualenv
python/env/clean:
	rm -rf $(VIRTUALENV)
