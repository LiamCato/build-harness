PY_PIPENV := $(shell which pipenv 2>/dev/null)
PY_PIPFILE_EXISTS:=$(shell echo "$$(test -f Pipfile; echo $$?)")

ifneq ($(PY_PIPENV),)
	PY_CURRENT_VENV:=$(shell python -c 'from __future__ import print_function; import sys; print(sys.prefix if hasattr(sys, "real_prefix") or (hasattr(sys, "base_prefix") and sys.base_prefix != sys.prefix) else "", end="")')
	ifeq ($(PY_CURRENT_VENV),)
		PY_VENV:=.venv
	else
		PY_VENV:=$(PY_CURRENT_VENV)
	endif

	PY_VENV_WORKDIR?=.

	ifeq ($(PY_PIPFILE_EXISTS),0)
		ifeq ($(PY_VENV_WORKDIR),.)
			PIPENV:=PIPENV_VENV_IN_PROJECT=1 $(PY_PIPENV)
		else
			PIPENV:=PIPENV_VENV_IN_PROJECT= WORKON_HOME='$(shell realpath $(PY_VENV_WORKDIR))' $(PY_PIPENV)
			# if the venv doesn't exist then this will fail and PY_VENV will be empty
			PY_VENV:=$(shell $(PIPENV) --venv 2> /dev/null)
			ifneq ($(.SHELLSTATUS),0)
				# means pipenv failed, so it doesn't exist yet. Need to cause a make env
				_:=$(shell $(value PIPENV) install --dev --deploy)

				PY_VENV:=$(shell $(PIPENV) --venv 2> /dev/null)
			endif
		endif

		WITH_PIPENV:=$(PIPENV) run
	endif
endif

Pipfile.lock:
	@echo "You need to lock your environment!"

$(PY_VENV)/bin/activate: Pipfile.lock
	$(PIPENV) install --dev --deploy
	if [ "$(PY_VENV_WORKDIR)" = "." ]; then touch $(PY_VENV)/bin/activate; fi

$(PY_VENV): $(PY_VENV)/bin/activate

.PHONY: pipenv/check
pipenv/check: python/check ; $(call assert-set,PY_PIPENV) && echo "Found pipenv: $(PY_PIPENV)"

.PHONY: pipenv/debug
pipenv/debug: python/debug
	$(call print-var,PY_PIPENV)
	$(call print-var,PY_PIPFILE_EXISTS)
	$(call print-var,PY_CURRENT_VENV)
	$(call print-var,PY_VENV)
	$(call print-var,PIPENV)
	$(call print-var,WITH_PIPENV)

## Install and activate a virtual environment using pipenv
pipenv: pipenv/check $(PY_VENV) Pipfile.lock
.PHONY: pipenv

env: pipenv
.PHONY: env

## Lock dependencies
pipenv/lock:
	$(PIPENV) lock
.PHONY: pipenv/lock

## Remove development virtualenv
pipenv/clean:
	$(PIPENV) --rm || true
.PHONY: pipenv/clean

## Generate requirements files based on a Pipfile
pipenv/generate_requirements:
	@echo "Writing requirements from Pipfile to requirements.txt and requirements-dev.txt..."
	@$(WITH_PIPENV) python -c 'from pipenv.project import Project; section = "packages"; reqs = {package: (ver["version"] if isinstance(ver, dict) else ver) for package, ver in Project().parsed_pipfile[section].items()}; fd = open("requirements.txt", mode="w"); [fd.write((r if reqs[r] == "*" else "{} {}".format(r, reqs[r])) + "\n") for r in reqs.keys()]; fd.close()'
	@$(WITH_PIPENV) python -c 'from pipenv.project import Project; section = "dev-packages"; reqs = {package: (ver["version"] if isinstance(ver, dict) else ver) for package, ver in Project().parsed_pipfile[section].items()}; fd = open("requirements-dev.txt", mode="w"); [fd.write((r if reqs[r] == "*" else "{} {}".format(r, reqs[r])) + "\n") for r in reqs.keys()]; fd.close()'
.PHONY: pipenv/generate_requirements
